(define (entropy input) 
  (define (freq-list x)
    (define (f x)
      (define (count a b)
        (cond ((null? b) 1)
              (else (+ (if (eq? a (car b)) 1 0) (count a (cdr b))))))
      (let ((t (car x)) (tt (cdr x)))
        (count t tt)))
    (define (g x)
      (define (filter a b)
        (cond ((null? b) '())
              ((eq? a (car b)) (filter a (cdr b)))
              (else (cons (car b) (filter a (cdr b))))))
      (let ((t (car x)) (tt (cdr x)))
        (filter t tt)))  
    (cond ((null? x) '())
          (else (cons (f x) (freq-list (g x))))))
  (define (scale x)
    (define (sum x)
      (if (null? x) 0.0 (+ (car x) (sum (cdr x)))))
    (let ((z (sum x)))
      (map (lambda(m) (/ m z)) x)))
  (define (cal x)
    (if (null? x) 0 (+ (* (car x) (/ (log (car x)) (log 2))) (cal (cdr x)))))
  (- (cal (scale (freq-list input)))))
    