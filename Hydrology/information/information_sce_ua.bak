(define (SCE_UA object_function range dimension)
  (define NGS 50)
  (define NPG 50)
  (define NPT 2500)
  (define MAXN 50)
  (define random
    (let ((a 69069) (c 1) (m (expt 2 32)) (seed 19380110))
       (lambda new-seed
          (if (pair? new-seed)
              (set! seed (car new-seed))
              (set! seed (modulo (+ (* seed a) c) m)))
          (+ (/ seed m) 0.0))))  
  (define (generate_strings)
    (define (build) 
      (define (b_in i ls)
        (if (> i dimension) '() (cons (+ (caar ls) (* (random) (- (cadr (car ls)) (caar ls)))) (b_in (+ i 1) (cdr ls)))))
      (b_in 1 range))
    (define (pro i)
      (if (> i NPT) '() (cons (build) (pro (+ i 1)))))
    (define (rank-pop pop)
      (map (lambda(str) (list (object_function str) str)) pop)) 
    (rank-pop (pro 1))) 
  (define (divide lis)
    (define (rank lis)
      (define (smallest x)
        (let ((a (car x)) (b (cdr x)))
          (cond ((null? b) a)
              ((< (car a) (car (smallest b))) a)
              (else (smallest b)))))
      (if (null? lis) '() (cons (smallest lis) (rank (cdr lis)))))
    (define (arrange lis seq)
      (map (lambda(i)
           (if (number? i) (list-ref lis i) (map (lambda(j) (list-ref lis j)) i))) seq))
    (define (sequence)
      (define (seq i)
        (define (se x)
          (define (tempt t)
            (if (< t NPG) (cons (+ x (* t NGS)) (tempt (+ t 1))) '()))
          (tempt 0))
        (if (eq? NGS i) '() (cons (se i) (seq (+ i 1)))))
      (seq 0))
    (arrange (rank lis) (sequence)))
  (define (evolve lis)
    (define (improve x)
      (define (process m n)
        (define (center)
          (define (com a)
            (define (plus ls1 ls2)
              (if (null? ls2) ls1 (map (lambda(x y) (+ x y)) ls1 ls2))) 
            (if (null? a) '() (plus (cadr (car a)) (com (cdr a)))))
          (map (lambda(z) (/ z (length n))) (com n)))
        (define (reflect)
          (map (lambda(x y) (- (* 2.0 y) x)) (cadr m) (center)))
        (define (contract)
          (map (lambda(x y) (/ (+ x y) 2.0)) (cadr m) (center)))
        (define (mutation)
          (define (b_in i ls)
            (if (> i dimension) '() (cons (+ (caar ls) (* (random) (- (cadr (car ls)) (caar ls)))) (b_in (+ i 1) (cdr ls)))))
          (b_in 1 range))
        (define (within string)
          (define (certi x)
            (if (null? x) #t (and (car x) (certi (cdr x)))))
          (certi (map (lambda(x y) (and (> x (car y)) (< x (cadr y)))) string range)))
        (cond ((and (within (reflect)) (> (object_function (reflect)) (car m))) (cons (object_function (reflect)) (list(reflect))))
              ((and (within (contract)) (> (object_function (contract)) (car m))) (cons (object_function (contract)) (list (contract))))
              (else (cons (object_function (mutation)) (list (mutation))))))    
      (let ((a (car x)) (b (cdr x)))
        (cons (process a b) b)))               
    (map (lambda(i) (improve i)) lis)) 
  (define (shuffle lis)
    (define (seperate x)
      (if (null? x) '() (append (car x) (seperate (cdr x)))))
    (divide (seperate lis))) 
  (define (mainline i lis)
    (cond ((eq? i 1) (mainline (+ i 1) (divide (generate_strings))))
          ((< i MAXN) (mainline (+ i 1) (shuffle (evolve lis))))
          (else (car (reverse (car (reverse lis)))))))
  (mainline 1 '()))
        
  (define (f z)
    (+ (* (car z) (car z)) (* (cadr z) (cadr z))))

  (define range (list (list -1 3) (list -3 2.9)))
  
  (SCE_UA f range 2)
  
